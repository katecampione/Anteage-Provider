{% assign has_practice_data = false %}
{% if customer.metafields.practice.name != blank and customer.metafields.practice.type != blank and customer.metafields.practice.short_description != blank and customer.metafields.practice.full_description != blank and customer.metafields.practice.website != blank %}
  {% assign has_practice_data = true %}
{% endif %}

<div class="Container Container--narrow locator-details">
    <header class="PageHeader mb0">
      <a href="/account/" class="PageHeader__Back Heading Text--subdued Link Link--primary u-h7">Back to account</a>
  
      <div class="SectionHeader mb0">
        <h1 class="SectionHeader__Heading Heading u-h1">Provider Locator Information</h1>
      </div>
    </header>
    <p class="mt1 mb2">{{ page.content }}</p>

    <div class="details-panel mt4">
      <h2 class="SectionHeader__Heading Heading u-h1">Practice Information</h2>
      <hr class="mt2 mb2">

      <form id="locator-practice" data-form-type="locator-update" data-form-validate="true">
        <div class="form-group--line">
          <div class="form-item">
            <label class="headUp" for="name">Practice Name*</label>
            <input name="name" id="name" type="text" class="Form__Input" placeholder="Practice Name"{% if customer.metafields.practice.name != blank %} value="{{ customer.metafields.practice.name }}"{% endif %}required>
          </div>
          
          <div class="form-item">
            <label class="headUp" for="type">Practice Type*</label>
            <select id="type" name="type" class="Form__Input" required>
              <option value=""{% if customer.metafields.practice.type == blank %} selected{% endif %} disabled>Select one...</option>
              <option value="Acupuncturist"{% if customer.metafields.practice.type == "Acupuncturist" %} selected{% endif %}>Acupuncturist</option>
              <option value="Chiropractor"{% if customer.metafields.practice.type == "Chiropractor" %} selected{% endif %}>Chiropractor</option>
              <option value="Dentist"{% if customer.metafields.practice.type == "Dentist" %} selected{% endif %}>Dentist</option>
              <option value="Dermatologist"{% if customer.metafields.practice.type == "Dermatologist" %} selected{% endif %}>Dermatologist</option>
              <option value="Esthetician"{% if customer.metafields.practice.type == "Esthetician" %} selected{% endif %}>Esthetician</option>
              <option value="General Medical Practice"{% if customer.metafields.practice.type == "General Medical Practice" %} selected{% endif %}>General Medical Practice</option>
              <option value="Massage Therapist"{% if customer.metafields.practice.type == "Massage Therapist" %} selected{% endif %}>Massage Therapist</option>
              <option value="Med Spa"{% if customer.metafields.practice.type == "Med Spa" %} selected{% endif %}>Med Spa</option>
              <option value="Plastic Surgeon"{% if customer.metafields.practice.type == "Plastic Surgeon" %} selected{% endif %}>Plastic Surgeon</option>
              <option value="Other"{% if customer.metafields.practice.type == "Other" %} selected{% endif %}>Other</option>
            </select>
          </div>
        </div>
        
        <div class="form-item" data-type="image-upload-group">
          <label class="headUp" for="logo">Practice Logo</label>
            <label for="logo" class="image-preview--wrapper{% unless customer.metafields.practice.logo != blank %} hidden{% endunless %}">
              <div data-option-control="logo-replace" data-type="image-preview" class="location-logo--preview">
                <div class="location-logo-replace--overlay">Replace Image...</div>
                <img loading="lazy" src="{{ customer.metafields.practice.logo.value | img_url: '400x400' }}" width=200 >
              </div>
            </label>
            <label for="logo" class="Button Button--stroke">{% unless customer.metafields.practice.logo != blank %}Select{% else %}Replace{% endunless %}</label>
            <button class="Button Button--stroke Button--delete{% unless customer.metafields.practice.logo != blank %} hidden{% endunless %}" data-option-control="logo-remove">Remove Logo</button>
            <input data-option-control="logo-upload" type="file" name="logo" id="logo" class="hidden" accept="*/image" >
            <input type="checkbox" name="remove_logo" id="remove_logo" class="hidden" data-option-for="remove_image">
        </div>
    
        <div class="form-item">
          {% assign short_description_rte = nil %}
          {% if customer.metafields.practice.short_description %}
            {% capture short_description_cap %}
              {{ customer.metafields.practice.short_description | metafield_tag }}
            {% endcapture %}
            {% assign short_description_rte = short_description_cap %}
          {% endif %}

          <label class="headUp" for="short_description">Short Description*</label>
          <textarea class="Form__Input hidden" name="short_description" id="short_description" placeholder="Enter your short description here..." required {% if customer.metafields.practice.short_description %} value="{{ short_description_rte | strip | replace: '<span class="metafield-multi_line_text_field">', '' | replace: '</span>', '' }}"{% endif %}>{% if customer.metafields.practice.short_description %}{{ short_description_rte | strip | replace: '<span class="metafield-multi_line_text_field">', '' | replace: '</span>', '' }}{% endif %}</textarea>
          <div contenteditable="true" class="Form__Input{% unless short_description_rte %} placeholder-shown{% endunless %}" data-input-controller="short_description" name="short-description-editor" id="short-description-editor">
            {% if short_description_rte %}
              {{ short_description_rte }}
            {% else %}
              Enter your short description here...
            {% endif %}
          </div>
        </div>
        
        <div class="form-item">
          {% assign description_rte = nil %}
          {% if customer.metafields.practice.full_description %}
            {% capture description_cap %}
              {{ customer.metafields.practice.full_description | metafield_tag }}
            {% endcapture %}
            {% assign description_rte = description_cap %}
          {% endif %}

          <label class="headUp" for="full_description">Full Description*</label>
          <textarea class="Form__Input hidden" name="full_description" id="full_description" placeholder="Enter your description here..." required {% if customer.metafields.practice.full_description %} value="{{ description_rte | strip | replace: '<div class="metafield-rich_text_field">', '' | replace: '</div>', '' }}"{% endif %}>{% if customer.metafields.practice.full_description %}{{ description_rte | strip | replace: '<div class="metafield-rich_text_field">', '' | replace: '</div>', '' }}{% endif %}</textarea>
          <div contenteditable="true" class="Form__Input{% unless description_rte %} placeholder-shown{% endunless %}" data-input-controller="full_description" name="description-editor" id="description-editor">
            {% if description_rte %}
              {{ description_rte }}
            {% else %}
              Enter your description here...
            {% endif %}
          </div>
        </div>
        
        <div class="form-group--line">
          <div class="form-item">
            <label class="headUp" for="website" data-validation-type="url">Website*</label>
            <input name="website" id="website" type="text" class="Form__Input" placeholder="https://website.com"{% if customer.metafields.practice.website != blank %} value="{{ customer.metafields.practice.website }}"{% endif %} required>
          </div>

          <div class="form-item">
            <label class="headUp" for="online_sales_link" data-validation-type="url">Link To Online Store</label>
            <input name="online_sales_link" id="online_sales_link" type="text" class="Form__Input" placeholder="https://website.com/shop"{% if customer.metafields.practice.online_sales_link != blank %} value="{{ customer.metafields.practice.online_sales_link }}"{% endif %}>
          </div>
        </div>
      
        <div class="form-group--line">
          <div class="form-item">
            <label class="headUp" for="instagram">Instagram URL</label>
            <input name="instagram" id="instagram" type="text" class="Form__Input" placeholder="https://instagram.com/yourprofile"{% if customer.metafields.practice.instagram != blank %} value="{{ customer.metafields.practice.instagram }}"{% endif %}>
          </div>
          
          <div class="form-item">
            <label class="headUp" for="facebook">Facebook URL</label>
            <input name="facebook" id="facebook" type="text" class="Form__Input" placeholder="https://facebook.com/yourprofile"{% if customer.metafields.practice.facebook != blank %} value="{{ customer.metafields.practice.facebook }}"{% endif %}>
          </div>
          
          <div class="form-item">
            <label class="headUp" for="tiktok">TikTok URL</label>
            <input name="tiktok" id="tiktok" type="text" class="Form__Input" placeholder="https://tiktok.com/@yourprofile"{% if customer.metafields.practice.tiktok != blank %} value="{{ customer.metafields.practice.tiktok }}"{% endif %}>
          </div>
        </div>
        
        <div class="form-group--line">
          <div class="form-item">
            <label class="headUp" for="twitter">Twitter URL</label>
            <input name="twitter" id="twitter" type="text" class="Form__Input" placeholder="https://twitter.com/yourprofile"{% if customer.metafields.practice.twitter != blank %} value="{{ customer.metafields.practice.twitter }}"{% endif %}>
          </div>
          
          <div class="form-item">
            <label class="headUp" for="realself">Realself URL</label>
            <input name="realself" id="realself" type="text" class="Form__Input" placeholder="https://realself.com/dr/yourprofile"{% if customer.metafields.practice.realself != blank %} value="{{ customer.metafields.practice.realself }}"{% endif %}>
          </div>
          
          <div class="form-item">
            <label class="headUp" for="yelp">Yelp URL</label>
            <input name="yelp" id="yelp" type="text" class="Form__Input" placeholder="https://yelp.com/biz/yourprofile"{% if customer.metafields.practice.yelp != blank %} value="{{ customer.metafields.practice.yelp }}"{% endif %}>
          </div>
        </div>
        
        <button type="submit" class="Button Button--primary" disabled>{% if has_practice_data %}Save Updates{% else %}Save Practice Details{% endif %}</button>
      </form>
    </div>

    <div class="details-panel">
      <h2 class="SectionHeader__Heading Heading u-h1">Locations</h2>
      <hr class="mt2 mb2">
      <div class="locations-wrapper">
        {% for location in customer.metafields.practice.locations_json.value %}
          <div class="location-item">
            <div class="location-image--outer">
              <div class="location-image--wrap{% unless location.hero_image != blank %} placeholder-image{% endunless %}">
                {% if location.hero_image != blank %}
                  <img src="{{ location.hero_image }}">
                {% else %}
                  <h3 class="Heading u-h2 mt0 mb0 centerContents">Click Edit Upload Your Image...</h3>
                {% endif %}
              </div>
            </div>
            <div class="mt1">
              <h3 class="Heading u-h2 mb0">{{ customer.metafields.practice.name }} - {{ location.city }}</h3>
              <div class="location-address--details">{{ location.address_1 }}{% if location.address_2 %} {{ location.address_2 }}{% endif %}</div>
              <div class="location-address--details">{{ location.city }}, {{ location.state }} {{ location.zip }}</div>
              <div class="location-address--details">{{ location.country }}</div>
              <button class="location-edit mt1" data-edit-target="{{ location.location_id }}">
                Edit
              </button>
            </div>
          </div>
        
        {% endfor %}
        {% comment %} <div class="location-item">
          <div class="location-image--outer">
            <div class="location-image--wrap">
              <img src="https://7051882.fs1.hubspotusercontent-na1.net/hubfs/7051882/Provider%20Locator%20-%20Provider%20Assets/Salt-Lake-City-900x730-1.png">
            </div>
          </div>
          <div class="mt1">
            <h3 class="Heading u-h2 mb0">Location Title</h3>
            <div class="location-address--details">123 Main Street</div>
            <div class="location-address--details">City, State 10110</div>
            <div class="location-address--details">Country</div>
            <button class="location-edit mt1">
              Edit
            </button>
          </div>
        </div> {% endcomment %}

        <div class="location-item new-location">
          <h3 class="Heading u-h1">+<br>Add A Location</h3>
        </div>

      </div>
  </div>
</div> 

<div class="add-location-modal modal-container">
  <button data-action="close-parent-modal">
    Close
  </button>

  <div class="Container Container--narrow">
    <h2 class="Heading u-h1">
      Add A Location
    </h2>
    <hr class="mt2 mb2">
    {% render 'form-locator-new-location' %}
  </div>

</div>

<div class="edit-location-modal modal-container">
  <button data-action="close-parent-modal">
    Close
  </button>
  <div class="Container Container--narrow">
    <h2 class="Heading u-h1 mb0">
      Edit Location
    </h2>
    <p class="mt0">Note: You cannot edit an address the location has been created. If you have moved or closed this location, please select the option below to <strong>Delete</strong> the location.</p>
    <hr class="mt2 mb2">
    {% render 'form-locator-edit-location' %}
  </div>

</div>

<script>

  // PENDING TASKS:
    // URL VALIDATION FOR WEBSITE / SHOP ONLINE
    // EMAIL VALIDATION
    // PHONE VALIDATION
    // MODAL FORM STYLING
    // CREATE / EDIT ENDPOINTS
    // HUBSPOT DATA EXCHANGE

  let locationsJson = JSON.parse(`{{ customer.metafields.practice.locations_json }}`);

  let stateLists = {
    united_states: ['Alabama', 'Alaska', 'American Samoa', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'District of Columbia', 'Florida', 'Georgia', 'Guam', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Minor Outlying Islands', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Northern Mariana Islands', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Puerto Rico', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'U.S. Virgin Islands', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'],
    canada: ['Alberta', 'British Columbia', 'Manitoba', 'New Brunswick', 'Newfoundland and Labrador', 'Nova Scotia', 'Ontario', 'Prince Edward Island', 'Quebec', 'Saskatchewan', 'Northwest Territories', 'Nunavut', 'Yukon']
  }

  let endpoints = [
    {
      'form_id': 'locator-practice',
      'url': 'https://en4jhrdwzz30916.m.pipedream.net'
    },
    {
      'form_id': 'locator-location-edit',
      'url': 'https://en6olnofr3qyio0.m.pipedream.net'
    },
    {
      'form_id': 'locator-location-add',
      'url': 'https://enzc0td4r99cahp.m.pipedream.net'
    }
  ]

  // Form Validation
  function getRequiredFields(formItem) {
    let requiredFields = [];
    let requiredInputs = formItem.querySelectorAll('input:required');
    requiredInputs.forEach(input => {
      requiredFields.push(input)
    })
    let requiredAreas = formItem.querySelectorAll('textarea:required');
    requiredAreas.forEach(textarea => {
      requiredFields.push(textarea)
    })
    let requiredSelects = formItem.querySelectorAll('select:required');
    requiredSelects.forEach(select => {
      requiredFields.push(select)
    })
    return requiredFields
  }

  function getFormFields(formItem) {
    let fields = [];
    let inputs = formItem.querySelectorAll('input');
    inputs.forEach(input => {
      fields.push(input)
    })
    let areas = formItem.querySelectorAll('textarea');
    areas.forEach(textarea => {
      fields.push(textarea)
    })
    let selects = formItem.querySelectorAll('select');
    selects.forEach(select => {
      fields.push(select)
    })
    return fields
  }

  function validateInputs() {
    let form = this.closest('form');
    let requiredFields = getRequiredFields(form);
    let submitButton = form.querySelector('button[type="submit"]');
    let validCount = 0;
    for (let i = 0; i < requiredFields.length; i++) {
      if (!requiredFields[i].value) {
        break
      } else {
        validCount += 1
      }
    }
    if (validCount === requiredFields.length) {
      submitButton.disabled = false
    } else {
      submitButton.disabled = true
    }
  }

  function matchContentValue(evt) {
    let parent = evt.target.closest('.form-item');
    let contentId = evt.target.getAttribute('data-input-controller');
    let hiddenInput = parent.querySelector(`[name=${contentId}]`);
    let newValue = evt.target.innerHTML.trim();
    newValue = newValue.replace('<div class="metafield-rich_text_field">', '');
    newValue = newValue.replace('</div>', '');
    newValue = newValue.replace('<span class="metafield-multi_line_text_field">', '');
    newValue = newValue.replace('</span>', '');
    hiddenInput.value = newValue
    hiddenInput.textContent = newValue
    let changeEvent = new Event('change');
    hiddenInput.dispatchEvent(changeEvent)
  }

  function initRichTextInputs() {
    let editableInputs = document.querySelectorAll('[contenteditable="true"]');
    editableInputs.forEach(field => {
      field.addEventListener('input', (event) => {
        matchContentValue(event)
      })
      field.addEventListener('focus', function() {
        field.classList.remove('placeholder-shown')
      })
    })
  }

  function changeEvent(target) {
    let changeEvent = new Event('change');
    target.dispatchEvent(changeEvent)
  }

  function initImageUploaders() {
    let imageUploaders = document.querySelectorAll('input[type="file"][accept="*/image"]');
    imageUploaders.forEach(imageInput => {
      imageInput.addEventListener('change', function(event) {
        let image = event.target.files[0];
        let imageUrl = URL.createObjectURL(image);
        let parent = this.closest('[data-type="image-upload-group"]');
        let canvas = parent.querySelector('img');
        let button = parent.querySelector('.Button');
        button.textContent = "Replace";
        canvas.src = imageUrl;
        parent.querySelector('.image-preview--wrapper').classList.remove('hidden');
        let removeButton = parent.querySelector('button[data-option-control="logo-remove"]');
        removeButton.classList.remove('hidden');
        let removeImageInput = parent.querySelector('input[type="checkbox"]');
        removeImageInput.checked = false;
        changeEvent(removeImageInput)
      })
    })
  }

  function removeImage(evt) {
    let parent = evt.target.closest('.form-item');
    let input = parent.querySelector('input[type="file"]');
    let preview = parent.querySelector('.image-preview--wrapper');
    let button = parent.querySelector('.Button');
    button.textContent = 'Upload'
    preview.classList.add('hidden');
    input.value = null;
    evt.target.classList.add('hidden');
    let removeImageInput = parent.querySelector('input[type="checkbox"]');
    removeImageInput.checked = true;
    changeEvent(removeImageInput)
  }

  function initImageRemovers() {
    let imageRemovers = document.querySelectorAll('button[data-option-control="logo-remove"]');
    imageRemovers.forEach(remover => {
      remover.addEventListener('click', function(event) {
        event.preventDefault();
        removeImage(event);
      })
    })
  }

  function initFormValidation() {
    initRichTextInputs()
    initImageUploaders()
    initImageRemovers()
    let forms = document.querySelectorAll('form[data-form-validate="true"]');
    forms.forEach(form => {
      let fields = getFormFields(form);
      fields.forEach(field => {
        field.addEventListener('change', validateInputs)
      })
    })
  }

  document.addEventListener('DOMContentLoaded', initFormValidation);

  // Modals & functionality

  function getLocations() {
    return document.querySelectorAll('.location-edit');
  }
  
  function getCloseButtons() {
    return document.querySelectorAll('[data-action="close-parent-modal"]');
  }
  
  function closeFormModal() {
    let parent = this.closest('.modal-container')
    parent.classList.remove('visible')
  }

  function showEditModal() {
    let editLocationModal = document.querySelector('.edit-location-modal');
    let contentId = this.getAttribute('data-edit-target');
    let json = locationsJson.find(location => location.location_id === contentId);
    populateEditForm(json)
    editLocationModal.classList.add('visible');
  }

  // Populate edit form on open
  function populateEditForm(content) {
    let editLocationModal = document.querySelector('.edit-location-modal');
    let form = editLocationModal.querySelector('form');
    let allFields = [];
    let fields = form.querySelectorAll('input[type="text"]');
    fields.forEach(field => {
      allFields.push(field)
    })
    allFields.push(document.getElementById('edit-hours'));
    for (let i = 0; i < allFields.length; i++) {
      let field = allFields[i];
      let fieldkey = field.name.replace('edit-', '');
      if (content[fieldkey]) {
        field.value = content[fieldkey]
      }
    }
    if (content['hero_image']) {
      let parent = form.querySelector('[data-type="image-upload-group"]');
      let image = parent.querySelector('img');
      image.src = content['hero_image'];
    } else {
      let parent = form.querySelector('[data-type="image-upload-group"]');
      let preview = parent.querySelector('.image-preview--wrapper');
      preview.classList.add('hidden')
    }
    let serviceOptions = form.querySelectorAll('input[type="checkbox"]');
    serviceOptions.forEach(option => {
      if (content.services.includes(option.value)) {
        option.checked = true
      }
    })
  }

  function updateStateOptions() {
    let form = this.closest('form');
    let stateInput = form.querySelector('[data-item-type="state"]');
    let parent = stateInput.closest('.form-item')
    let label = parent.querySelector('label');
    let itemId = stateInput.id
    stateInput.remove();
    let key = this.value.toLowerCase().replaceAll(' ', '_');
    let stateList = stateLists[key];
    if (stateList) {
      let stateSelect = document.createElement('select');
      stateSelect.id = itemId;
      stateSelect.name = itemId;
      stateSelect.setAttribute('data-item-type', 'state');
      stateSelect.classList.add('Form__Input');
      stateInput.required = true
      label.textContent = 'State*'
      for (let i = 0; i < stateLists[key].length; i++) {
        if (i === 0) {
          let placeholderOption = document.createElement('option');
          placeholderOption.innerHTML = 'Choose one...';
          placeholderOption.disabled = true
          placeholderOption.selected = true
          stateSelect.appendChild(placeholderOption)
        }
        let dataOption = document.createElement('option');
        dataOption.value = stateLists[key][i];
        dataOption.innerHTML = stateLists[key][i];
        stateSelect.appendChild(dataOption)
      }
      parent.appendChild(stateSelect)
    } else {
      let stateInput = document.createElement('input');
      stateInput.type = "text"
      stateInput.id = itemId;
      stateInput.name = itemId;
      stateInput.classList.add('Form__Input');
      stateInput.setAttribute('data-item-type', 'state');
      label.textContent = "State"
      parent.appendChild(stateInput)
    }
  }

  function initModalFunctionality() {
    let triggerAddLocation = document.querySelector('.new-location');
    let addLocationForm = document.querySelector('.add-location-modal');
    let editLocationForm = document.querySelector('.edit-location-modal');
    let locationItems = getLocations();
    let modalCloseTriggers = getCloseButtons();
    let countrySelectors = document.querySelectorAll('[data-controller-type="country"]')

    locationItems.forEach(item => {
      item.addEventListener('click', showEditModal)
    })
    
    triggerAddLocation.addEventListener('click', function() {
      addLocationForm.classList.add('visible')
    })
    
    modalCloseTriggers.forEach(button => {
      button.addEventListener('click', closeFormModal);
    })

    countrySelectors.forEach(input => {
      input.addEventListener('change', updateStateOptions)
    })
  }

  document.addEventListener('DOMContentLoaded', initModalFunctionality)

  function destroyNotice() {
    let displayedNotice = document.querySelector('[data-content-type="snackbar"]');
    displayedNotice.classList.remove('display-snackbar');
    setTimeout(function() {
      displayedNotice.remove();
    }, 250)
  }

  function createNotice(type) {
    let notice = document.createElement('div');
    notice.classList.add('snackbar-main');
    notice.setAttribute('data-content-type', 'snackbar')
    if (type === 'success') {
      notice.innerHTML = `<h2 class="Heading u-h2 mt0">Success</h2><p class="mt1 mb0">Your updates have been saved successfully.</p>`
    } else if (type === 'error') {
      notice.classList.add('status--error')
      notice.innerHTML = `<h2 class="Heading u-h2 mt0">Error</h2><p class="mt1 mb0">The system ran into an issue applying your updates, please reload this page and try again.</p>`
    } else {
      notice.innerHTML = `<h2 class="Heading u-h2 mt0">Updating Your Profile</h2><p class="mt1 mb0">Please wait while we update your profile...</p>`
    }
    document.querySelector('body').appendChild(notice);
    setTimeout(function() {
      notice.classList.add('display-snackbar')
    }, 50)
  }

  function formSuccess(target) {
    destroyNotice()
    let button = target.querySelector('button[type="submit"]');
    button.textContent = 'Save Updates';
    createNotice('success')
    // Reload the page to refresh data
    setTimeout(function() {
      window.location.reload(true);
    }, 1500)
  }

  function formError(data) {
    destroyNotice()
    let button = target.querySelector('button[type="submit"]');
    button.textContent = 'Save Updates';
    createNotice('error')
    setTimeout(destroyNotice, 4000)
  }

  async function submitPracticeForm(form) {
    // Set the endpoint based on which form was submitted
    let endpointObject = endpoints.find(option => option.form_id === form.id);
    if (!endpointObject) {
      return
    }
    endpoint = endpointObject.url

    // Update the submit button
    let submitButton = form.querySelector('button[type="submit"]');
    submitButton.disabled = true;
    submitButton.textContent = 'Please Wait';   

    // Create snackbar notification
    createNotice('updating') 

    // Prepare the form data
    let formData = new FormData(form);
    formData.append('customer_id', '{{ customer.id }}')
    formData.append('customer_email', '{{ customer.email }}')
    let imageCheckbox = form.querySelector('[data-option-for="remove_image"]')
    if (imageCheckbox) {
      if (imageCheckbox.checked) {
        formData.append('remove_image', true)
      } else {
        formData.append('remove_image', false)
      }
    }

    // Continued preparation - ensure proper formatting of urls for url type metafields
    if (form.id === 'locator-practice') {
      let websiteInput = formData.get('website');
      if (websiteInput) {
        if (!/^https?:\/\//i.test(websiteInput)) {
          formData.set('website', `https://${websiteInput}`);
        }
      }
      let onlineSalesInput = formData.get('online_sales_link');
      if (onlineSalesInput) {
        if (!/^https?:\/\//i.test(onlineSalesInput)) {
          formData.set('online_sales_link', `https://${onlineSalesInput}`);
        }
      }
    }

    // Set post data
    let params = {
      method: 'POST',
      body: formData
    }

    // Make the call
    await fetch(endpoint, params)
      .then(response => formSuccess(form))
      .catch(error => formError(form));
  }

  function initSubmitListeners() {
    let forms = document.querySelectorAll('form[data-form-type="locator-update"]');
    forms.forEach(form => {
      form.addEventListener('submit', function() {
        event.preventDefault();
        submitPracticeForm(this)
      })
    })
  }

  document.addEventListener('DOMContentLoaded', initSubmitListeners)
</script>